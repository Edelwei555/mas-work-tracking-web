rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Функції для перевірки ролей
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin(userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    function isTeamMember(teamId, userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)/members/$(userId));
    }
    
    function isTeamAdmin(teamId, userId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/teams/$(teamId)/members/$(userId)) &&
        get(/databases/$(database)/documents/teams/$(teamId)/members/$(userId)).data.role == 'admin';
    }

    // Правила для користувачів
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin(request.auth.uid);
    }

    // Правила для команд
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isTeamAdmin(teamId, request.auth.uid);
      allow delete: if isAuthenticated() && isTeamAdmin(teamId, request.auth.uid);
    }

    // Правила для учасників команд
    match /teams/{teamId}/members/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        // Дозволяємо створювати запис, якщо це перший учасник (творець команди)
        // або якщо поточний користувач є адміном команди
        (!exists(/databases/$(database)/documents/teams/$(teamId)/members/**)) ||
        isTeamAdmin(teamId, request.auth.uid)
      );
      allow update: if isAuthenticated() && isTeamAdmin(teamId, request.auth.uid);
      allow delete: if isAuthenticated() && isTeamAdmin(teamId, request.auth.uid);
    }

    // Правила для записів часу
    match /timeEntries/{entryId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeamMember(resource.data.teamId, request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeamAdmin(resource.data.teamId, request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isTeamAdmin(resource.data.teamId, request.auth.uid)
      );
    }

    // Правила для типів робіт
    match /workTypes/{typeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // Правила для локацій
    match /locations/{locationId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }
  }
} 